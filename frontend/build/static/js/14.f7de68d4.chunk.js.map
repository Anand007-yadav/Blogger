{"version":3,"sources":["components/Login.js"],"names":["dotenv","config","baseURL","process","REACT_APP_BASEURL","Login","twitterAuthHandler","err","data","window","location","user","username","screen_name","socialId","user_id","axios","post","then","res","count","sessionStorage","setItem","setTimeout","removeItem","reload","catch","console","error","getItem","history","back","response","profileObj","name","googleId","className","clientId","buttonText","onSuccess","this","successGoogleLogin","onFailure","failureGoogleLogin","cookiePolicy","scope","authCallback","consumerKey","consumerSecret","callbackUrl","buttonTheme","React","Component"],"mappings":"yOAOAA,IAAOC,SACP,IAAMC,EAAUC,0WAAYC,mBAAqB,wBAE3CC,E,4MAoDFC,mBAAqB,SAACC,EAAKC,GACvB,GAAID,EACAE,OAAOC,SAAW,aACf,CACH,IAAMC,EAAO,CACTC,SAAUJ,EAAKK,YACfC,SAAUN,EAAKO,SAGnBC,IACKC,KADL,UACaf,EADb,eACmCS,GAC9BO,MAAK,SAACC,GACH,IAAIC,EAAQ,EAERD,EAAIX,KAAKM,UACTO,eAAeC,QAAQ,aAAc,QACrCD,eAAeC,QAAQ,WAAYH,EAAIX,KAAKI,UAC5CQ,IAEAX,OAAOc,YAAW,WACdF,eAAeG,WAAW,cAC1BH,eAAeG,WAAW,cAC3B,QAEW,IAAVJ,GACAX,OAAOC,SAASe,UAGpBhB,OAAOC,SAAW,YAGzBgB,OAAM,SAACnB,GAAD,OAASoB,QAAQC,MAAMrB,Q,kEAhFO,SAAzCc,eAAeQ,QAAQ,eACvBpB,OAAOqB,QAAQC,S,yCAKJC,GAEf,IAAMrB,EAAO,CACTC,SAAUoB,EAASC,WAAWC,KAC9BpB,SAAUkB,EAASG,UAIvBnB,IACKC,KADL,UACaf,EADb,eACmCS,GAC9BO,MAAK,SAACC,GAEH,IAAIC,EAAQ,EAGRD,EAAIX,KAAKM,WAAakB,EAASG,UAE/Bd,eAAeC,QAAQ,aAAc,QACrCD,eAAeC,QAAQ,WAAYH,EAAIX,KAAKI,UAC5CQ,IAIAX,OAAOc,YAAW,WACdF,eAAeG,WAAW,cAC1BH,eAAeG,WAAW,cAC3B,QAGW,IAAVJ,GACAX,OAAOC,SAASe,UAKpBhB,OAAOC,SAAW,YAGzBgB,OAAM,SAACnB,GAAD,OAASoB,QAAQC,MAAMrB,Q,yCAyCnByB,GACfL,QAAQC,MAAMI,GACdvB,OAAOC,SAAW,W,+BAIlB,OACI,yBAAK0B,UAAU,aACX,yBAAKA,UAAU,SACX,6DAEI,0BAAMA,UAAU,aAAhB,MAEJ,wBAAIA,UAAU,YACd,yBAAKA,UAAU,UACX,kBAAC,IAAD,CACIC,SAAUlC,2EACVmC,WAAW,qBACXC,UAAWC,KAAKC,mBAChBC,UAAWF,KAAKG,mBAChBC,aAAc,qBACdC,MAAM,aAGd,6BACA,yBAAKT,UAAU,WACX,kBAAC,IAAD,CACIU,aAAcN,KAAKlC,mBACnByC,YACI5C,4BAEJ6C,eACI7C,qDAEJ8C,YAAY,2CACZC,YAAY,iB,GA3HpBC,IAAMC,WAoIX/C","file":"static/js/14.f7de68d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport dotenv from \"dotenv\";\r\n\r\nimport GoogleLogin from \"react-google-login\";\r\nimport TwitterLogin from \"react-twitter-login\";\r\n\r\ndotenv.config();\r\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\r\n\r\nclass Login extends React.Component {\r\n    //After logging in, redirect to previous page\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem(\"isLoggedIn\") === \"true\") {\r\n            window.history.back();\r\n        }\r\n    }\r\n\r\n    // Google login success callback\r\n    successGoogleLogin(response) {\r\n        // Create an instance of the user\r\n        const user = {\r\n            username: response.profileObj.name,\r\n            socialId: response.googleId,\r\n        };\r\n\r\n        // Make an API call to either findOrCreate the user\r\n        axios\r\n            .post(`${baseURL}/auth/login`, user)\r\n            .then((res) => {\r\n                // Reload the page once count is 1 to reload the navbar component and display \"Logout\" as an option instead of \"Login\"\r\n                let count = 0;\r\n\r\n                // If the response has a valid social Id\r\n                if (res.data.socialId === response.googleId) {\r\n                    // Set the username and isLoggedIn in the session storage\r\n                    sessionStorage.setItem(\"isLoggedIn\", \"true\");\r\n                    sessionStorage.setItem(\"username\", res.data.username);\r\n                    count++;\r\n\r\n                    // Remove the user session cookie after 24 hours, to log the user out.\r\n                    // This is for cases when the user doesn't end the session or doesn't logout\r\n                    window.setTimeout(() => {\r\n                        sessionStorage.removeItem(\"isLoggedIn\");\r\n                        sessionStorage.removeItem(\"username\");\r\n                    }, 24 * 60 * 60 * 60);\r\n\r\n                    // If user data is stored in the session Storage, then reload page to update Navbar component appropriately\r\n                    if (count === 1) {\r\n                        window.location.reload();\r\n                    }\r\n                }\r\n                // If user data returned is invalid, then redirect to the login page once again\r\n                else {\r\n                    window.location = \"/login\";\r\n                }\r\n            })\r\n            .catch((err) => console.error(err));\r\n    }\r\n\r\n    // Twitter login success callback\r\n    // Very similar to the previous google login callback\r\n    twitterAuthHandler = (err, data) => {\r\n        if (err) {\r\n            window.location = \"/login\";\r\n        } else {\r\n            const user = {\r\n                username: data.screen_name,\r\n                socialId: data.user_id,\r\n            };\r\n\r\n            axios\r\n                .post(`${baseURL}/auth/login`, user)\r\n                .then((res) => {\r\n                    let count = 0;\r\n\r\n                    if (res.data.socialId) {\r\n                        sessionStorage.setItem(\"isLoggedIn\", \"true\");\r\n                        sessionStorage.setItem(\"username\", res.data.username);\r\n                        count++;\r\n\r\n                        window.setTimeout(() => {\r\n                            sessionStorage.removeItem(\"isLoggedIn\");\r\n                            sessionStorage.removeItem(\"username\");\r\n                        }, 24 * 60 * 60 * 60);\r\n\r\n                        if (count === 1) {\r\n                            window.location.reload();\r\n                        }\r\n                    } else {\r\n                        window.location = \"/login\";\r\n                    }\r\n                })\r\n                .catch((err) => console.error(err));\r\n        }\r\n    };\r\n\r\n    // Google login failure callback\r\n    failureGoogleLogin(response) {\r\n        console.error(response);\r\n        window.location = \"/login\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"login\">\r\n                    <h5>\r\n                        Login with your social account\r\n                        <span className=\"full-stop\">.</span>\r\n                    </h5>\r\n                    <hr className=\"gold-hr\" />\r\n                    <div className=\"google\">\r\n                        <GoogleLogin\r\n                            clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n                            buttonText=\"Log in With Google\"\r\n                            onSuccess={this.successGoogleLogin}\r\n                            onFailure={this.failureGoogleLogin}\r\n                            cookiePolicy={\"single_host_origin\"}\r\n                            scope=\"profile\"\r\n                        />\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"twitter\">\r\n                        <TwitterLogin\r\n                            authCallback={this.twitterAuthHandler}\r\n                            consumerKey={\r\n                                process.env.REACT_APP_TWITTER_CONSUMER_ID\r\n                            }\r\n                            consumerSecret={\r\n                                process.env.REACT_APP_TWITTER_CONSUMER_SECRET\r\n                            }\r\n                            callbackUrl=\"https://mern-blog-it.herokuapp.com/login\"\r\n                            buttonTheme=\"light\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}