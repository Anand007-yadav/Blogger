{"version":3,"sources":["components/Navbar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","isLoggedIn","handleNavbarCollapse","bind","sessionStorage","getItem","this","setState","prevState","document","querySelector","classList","remove","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","window","removeItem","location","Component","Footer","open","Landing","lazy","Post","CreatePost","EditPost","PostsList","Login","About","App","fallback","role","path","exact","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.08dbd0e9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Navbar extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { isLoggedIn: false };\r\n\r\n        this.handleNavbarCollapse = this.handleNavbarCollapse.bind(this);\r\n    }\r\n\r\n    // Update navbar component when user logs in, to display \"Login\" or \"Logout\"\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem(\"isLoggedIn\") === \"true\") {\r\n            this.setState((prevState) => {\r\n                if (!prevState.isLoggedIn) {\r\n                    return { isLoggedIn: true };\r\n                }\r\n            });\r\n        }\r\n        if (sessionStorage.getItem(\"isLoggedIn\") === \"false\") {\r\n            this.setState((prevState) => {\r\n                if (prevState.isLoggedIn) {\r\n                    return { isLoggedIn: false };\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Collapse navabr after clicked on mobile screens\r\n    handleNavbarCollapse() {\r\n        document.querySelector(\"#navbarTogglerDemo01\").classList.remove(\"show\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-custom navbar-expand-lg\">\r\n                <Link to=\"/\" className=\"navbar-brand\">\r\n                    <i className=\"fas fa-pen-alt\" /> Blog\r\n                    <span className=\"full-stop\">.</span>It\r\n                </Link>\r\n                <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    data-toggle=\"collapse\"\r\n                    data-target=\"#navbarTogglerDemo01\"\r\n                    aria-controls=\"navbarTogglerDemo01\"\r\n                    aria-expanded=\"false\"\r\n                    aria-label=\"Toggle navigation\"\r\n                >\r\n                    <span>\r\n                        <i className=\"fa fa-bars\"></i>\r\n                    </span>\r\n                </button>\r\n                <div\r\n                    className=\"collapse navbar-collapse\"\r\n                    id=\"navbarTogglerDemo01\"\r\n                >\r\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                        <li className=\"navbar-item\">\r\n                            <Link\r\n                                to=\"/about\"\r\n                                className=\"nav-link\"\r\n                                // Collapse the navbar once an item is clicked\r\n                                onClick={this.handleNavbarCollapse}\r\n                            >\r\n                                About\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"navbar-item\">\r\n                            <Link\r\n                                to=\"/posts\"\r\n                                className=\"nav-link\"\r\n                                // Collapse the navbar once an item is clicked\r\n                                onClick={this.handleNavbarCollapse}\r\n                            >\r\n                                Posts\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"navbar-item\">\r\n                            <Link\r\n                                to=\"/posts/new\"\r\n                                className=\"nav-link\"\r\n                                // Collapse the navbar once an item is clicked\r\n                                onClick={this.handleNavbarCollapse}\r\n                            >\r\n                                New Post\r\n                            </Link>\r\n                        </li>\r\n\r\n                        {/* Display \"Login\" or \"Logout\" link based on the state of the navbar component */}\r\n                        {!this.state.isLoggedIn ? (\r\n                            <li className=\"navbar-item\">\r\n                                <Link\r\n                                    to=\"/login\"\r\n                                    className=\"nav-link\"\r\n                                    // Collapse the navbar once an item is clicked\r\n                                    onClick={this.handleNavbarCollapse}\r\n                                >\r\n                                    Login\r\n                                </Link>\r\n                            </li>\r\n                        ) : (\r\n                            <li className=\"navbar-item\">\r\n                                <Link\r\n                                    to=\"/logout\"\r\n                                    className=\"nav-link\"\r\n                                    onClick={() => {\r\n                                        window.sessionStorage.removeItem(\r\n                                            \"isLoggedIn\"\r\n                                        );\r\n                                        window.sessionStorage.removeItem(\r\n                                            \"username\"\r\n                                        );\r\n                                        window.location = \"/posts\";\r\n                                    }}\r\n                                >\r\n                                    Logout\r\n                                </Link>\r\n                            </li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => (\r\n    <footer>\r\n        Created by <span id=\"rajat\">Rajat</span>\r\n        <br />\r\n        <span>\r\n            <i\r\n                className=\"fab fa-github\"\r\n                onClick={() =>\r\n                    window.open(\"https://github.com/Rajatm544\", \"_blank\")\r\n                }\r\n            ></i>{\" \"}\r\n            <i\r\n                className=\"fab fa-hackerrank\"\r\n                onClick={() =>\r\n                    window.open(\"https://www.hackerrank.com/Rajat_M\", \"_blank\")\r\n                }\r\n            ></i>{\" \"}\r\n            <i\r\n                className=\"fab fa-linkedin\"\r\n                onClick={() =>\r\n                    window.open(\r\n                        \"https://www.linkedin.com/in/rajat--m\",\r\n                        \"_blank\"\r\n                    )\r\n                }\r\n            ></i>{\" \"}\r\n            <i\r\n                className=\"fab fa-stack-overflow\"\r\n                onClick={() =>\r\n                    window.open(\r\n                        \"https://stackoverflow.com/users/13040278/rajat-m\",\r\n                        \"_blank\"\r\n                    )\r\n                }\r\n            ></i>{\" \"}\r\n            <i\r\n                className=\"fab fa-twitter\"\r\n                onClick={() =>\r\n                    window.open(\"https://twitter.com/Rajat__m\", \"_blank\")\r\n                }\r\n            ></i>\r\n        </span>\r\n    </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\n//Import style\r\nimport \"./stylesheets/index.css\";\r\n\r\n//Import all components\r\nimport Navbar from \"./components/Navbar\";\r\nimport Footer from \"./components/Footer\";\r\nconst Landing = lazy(() => import(\"./components/Landing\"));\r\nconst Post = lazy(() => import(\"./components/Post\"));\r\nconst CreatePost = lazy(() => import(\"./components/CreatePosts\"));\r\nconst EditPost = lazy(() => import(\"./components/EditPost\"));\r\nconst PostsList = lazy(() => import(\"./components/PostsList\"));\r\nconst Login = lazy(() => import(\"./components/Login\"));\r\nconst About = lazy(() => import(\"./components/About\"));\r\n\r\nconst renderLoader = () => (\r\n    <div className=\"spinner-container\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst App = () => (\r\n    <div className=\"container\">\r\n        <Router>\r\n            <Navbar />\r\n            <Suspense fallback={renderLoader()}>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={Landing} />\r\n                    <Route path=\"/posts\" exact component={PostsList} />\r\n                    <Route path=\"/posts/new/\" exact component={CreatePost} />\r\n                    <Route path=\"/posts/:id\" exact component={Post} />\r\n                    <Route path=\"/posts/:id/edit\" exact component={EditPost} />\r\n                    <Route path=\"/login\" component={Login} />\r\n                    <Route path=\"/about\" component={About} />\r\n                </Switch>\r\n            </Suspense>\r\n            <Footer />\r\n        </Router>\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}